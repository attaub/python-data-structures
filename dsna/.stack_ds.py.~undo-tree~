(undo-tree-save-format-version . 1)
"8f15346fa5d8a0ab87ed1028d5e518b7d090bc5a"
[nil nil nil nil (26514 795 330598 677000) 0 nil]
([nil nil ((4 . 6) (nil fontified nil 4 . 6) (3 . 6) (#("\"" 0 1 (syntax-table (15) fontified nil)) . -3) (undo-tree-id0 . -1) (3 . 5) (#("\"" 0 1 (syntax-table (15) face font-lock-doc-face fontified nil)) . -3) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (2 . 4) (#("\"" 0 1 (face font-lock-doc-face fontified nil)) . -2) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("\"" 0 1 (syntax-table (15) face font-lock-doc-face fontified nil)) . 3) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (1 . 3) (#("\"" 0 1 (fontified nil)) . -1) (undo-tree-id20 . -1) (1 . 3) (#("\"" 0 1 (fontified nil)) . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (1 . 2) (#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 2 (1 . 2) (t 26514 770 933509 880000)) nil (26514 795 330595 502000) 0 nil])
([nil nil ((9 . 10)) nil (26514 795 330545 778000) 0 nil])
([nil nil ((4 . 5) (t 26514 795 350620 437000) 1) nil (26514 814 341933 15000) 0 nil])
([nil nil ((nil rear-nonsticky nil 490 . 491) (nil fontified nil 5 . 491) (5 . 491)) nil (26514 814 341929 216000) 0 nil])
([nil nil ((#("In Python," 0 10 (face font-lock-doc-face fontified t)) . 5) (undo-tree-id40 . -9) (undo-tree-id41 . -10) (t 26514 814 359704 353000)) nil (26514 841 857148 645000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 5) (undo-tree-id38 . -1) (undo-tree-id39 . -1)) nil (26514 841 857146 932000) 0 nil])
([nil nil ((5 . 6) (#("a" 0 1 (face font-lock-doc-face fontified t)) . 5) (undo-tree-id37 . -1)) nil (26514 841 857145 186000) 0 nil])
([nil nil ((#("the Last In," 0 12 (face font-lock-doc-face fontified t)) . 53) (undo-tree-id35 . -11) (undo-tree-id36 . -12)) nil (26514 841 857144 239000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 53) (undo-tree-id33 . -1) (undo-tree-id34 . -1)) nil (26514 841 857142 592000) 0 nil])
([nil nil ((#("First Out " 0 10 (face font-lock-doc-face fontified t)) . 53) (undo-tree-id31 . -9) (undo-tree-id32 . -10)) nil (26514 841 857137 604000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-doc-face fontified t)) . 53) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (t 26514 841 874822 624000)) nil (26514 855 625147 715000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-doc-face fontified t)) . 57) (undo-tree-id75 . -1) (undo-tree-id76 . -1)) nil (26514 855 625146 507000) 0 nil])
([nil nil ((68 . 69) (67 . 68) (#("." 0 1 (face font-lock-doc-face fontified t)) . 67) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1)) nil (26514 855 625144 986000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 69) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1)) nil (26514 859 437699 869000) 0 nil])
([nil nil ((#("It means the " 0 13 (face font-lock-doc-face fontified t)) . 69) (undo-tree-id82 . 13) (undo-tree-id83 . -12) (undo-tree-id84 . -13)) nil (26514 863 342699 861000) 0 nil] [nil nil ((#("It means the last element added to the stack will be the first one to be removed.
" 0 82 (face font-lock-doc-face fontified t)) . 69) (undo-tree-id79 . 82) (undo-tree-id80 . -81) (undo-tree-id81 . -82) (t 26514 855 640880 434000)) ((69 . 151) (t 26514 859 118894 899000)) (26514 859 102508 99000) 0 nil])
([nil nil ((69 . 70) (#("l" 0 1 (face font-lock-doc-face fontified t)) . 69)) nil (26514 863 342688 773000) 0 nil])
nil
([nil nil ((139 . 140) (#("You can implement a " 0 20 (face font-lock-doc-face fontified t)) . 139) (undo-tree-id246 . -19) (undo-tree-id247 . -19) (undo-tree-id248 . -19) (undo-tree-id249 . -19) (undo-tree-id250 . -19) (undo-tree-id251 . -20) (undo-tree-id252 . -20) (undo-tree-id253 . -20) 158 (t 26514 863 358912 458000)) nil (26514 910 46173 947000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-doc-face fontified t)) . 140) (undo-tree-id242 . 1) (undo-tree-id243 . 1) (undo-tree-id244 . -1) (undo-tree-id245 . -1)) nil (26514 910 46171 6000) 0 nil])
([nil nil ((159 . 174) (#("e" 0 1 (face font-lock-doc-face fontified t)) . -159) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -160) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (#("i" 0 1 (face font-lock-doc-face fontified t)) . -161) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 162 (154 . 162)) nil (26514 910 46167 332000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 173) (undo-tree-id143 . -1) (undo-tree-id144 . -1)) nil (26514 910 44552 882000) 0 nil])
([nil nil ((#("you can use the" 0 15 (face font-lock-doc-face fontified t)) . 191) (undo-tree-id136 . -14) (undo-tree-id137 . -14) (undo-tree-id138 . -14) (undo-tree-id139 . -14) (undo-tree-id140 . -14) (undo-tree-id141 . -15) (undo-tree-id142 . -15) 205) nil (26514 910 44551 782000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 191) (undo-tree-id133 . 1) (undo-tree-id134 . -1) (undo-tree-id135 . -1)) nil (26514 910 44547 798000) 0 nil])
([nil nil ((187 . 188) (#("a" 0 1 (face font-lock-doc-face fontified t)) . -187) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 188 (187 . 188)) nil (26514 910 44545 898000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . 188) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1)) nil (26514 910 44536 625000) 0 nil])
([nil nil ((#("Here's an example using both methods:" 0 37 (face font-lock-doc-face fontified t)) . 246) (undo-tree-id422 . -36) (undo-tree-id423 . -37) (undo-tree-id424 . -37) (t 26514 910 62100 609000)) nil (26514 945 786712 40000) 0 nil])
([nil nil ((#("1. Stack using Python List:
Python lists have methods like append() and pop() that make them perfect for implementing a stack.

python
Copy


" 0 139 (face font-lock-doc-face fontified t) 139 140 (face font-lock-doc-face fontified t rear-nonsticky t) 140 141 (face font-lock-doc-face fontified t) 141 142 (face font-lock-doc-face fontified t)) . 248) (undo-tree-id399 . -141) (undo-tree-id400 . -141) (undo-tree-id401 . -140) (undo-tree-id402 . -140) (undo-tree-id403 . -141) (undo-tree-id404 . -28) (undo-tree-id405 . -28) (undo-tree-id406 . -28) (undo-tree-id407 . -28) (undo-tree-id408 . -28) (undo-tree-id409 . -28) (undo-tree-id410 . -28) (undo-tree-id411 . -28) (undo-tree-id412 . -28) (undo-tree-id413 . -28) (undo-tree-id414 . -28) (undo-tree-id415 . -141) (undo-tree-id416 . -28) (undo-tree-id417 . -28) (undo-tree-id418 . -28) (undo-tree-id419 . -141) (undo-tree-id420 . -141) (undo-tree-id421 . -142) 389) nil (26514 945 786709 510000) 0 nil])
([nil nil ((253 . 255) (252 . 253) 252) nil (26514 945 786701 227000) 0 nil])
([nil nil ((nil rear-nonsticky nil 255 . 256) (#("
" 0 1 (fontified nil face font-lock-doc-face)) . -397) (255 . 398) 254) nil (26514 945 786700 781000) 0 nil])
([nil nil ((254 . 255) (#(" " 0 1 (face font-lock-comment-delimiter-face fontified nil)) . 254) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("
" 0 1 (face font-lock-comment-face fontified t rear-nonsticky t)) . -255) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) 253) nil (26514 945 786699 623000) 0 nil])
([nil nil ((285 . 286) (283 . 285)) nil (26514 945 786686 500000) 0 nil])
([nil nil ((#("Python " 0 7 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id346 . 7) (undo-tree-id347 . -6) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -2) (undo-tree-id351 . -2) (undo-tree-id352 . -2) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -7)) nil (26514 945 786685 959000) 0 nil])
([nil nil ((#("lists " 0 6 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id343 . 6) (undo-tree-id344 . -5) (undo-tree-id345 . -6)) nil (26514 945 786682 536000) 0 nil])
([nil nil ((#("have " 0 5 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id340 . 5) (undo-tree-id341 . -4) (undo-tree-id342 . -5)) nil (26514 945 786681 108000) 0 nil])
([nil nil ((#("methods " 0 8 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id337 . 8) (undo-tree-id338 . -7) (undo-tree-id339 . -8)) nil (26514 945 786679 527000) 0 nil])
([nil nil ((#("like " 0 5 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id334 . 5) (undo-tree-id335 . -4) (undo-tree-id336 . -5)) nil (26514 945 786677 987000) 0 nil])
([nil nil ((#("append() and pop() that make them perfect for implementing a stack." 0 6 (face font-lock-comment-face fontified t) 6 7 (face font-lock-comment-face fontified t) 7 8 (face font-lock-comment-face fontified t) 8 9 (face font-lock-comment-face fontified t) 9 12 (face font-lock-comment-face fontified t) 12 16 (face font-lock-comment-face fontified t) 16 17 (face font-lock-comment-face fontified t) 17 18 (face font-lock-comment-face fontified t) 18 42 (face font-lock-comment-face fontified t) 42 45 (face font-lock-comment-face fontified t) 45 67 (face font-lock-comment-face fontified t)) . 286) (undo-tree-id330 . 67) (undo-tree-id331 . -66) (undo-tree-id332 . -67) (undo-tree-id333 . -67)) nil (26514 945 786676 591000) 0 nil])
([nil nil ((#("#  
" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 4 (face font-lock-comment-face fontified t)) . 283) (undo-tree-id261 . 1) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . -3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -3) (undo-tree-id269 . -3) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -2) (undo-tree-id277 . -3) (undo-tree-id278 . -3) (undo-tree-id279 . -3) (undo-tree-id280 . -3) (undo-tree-id281 . -3) (undo-tree-id282 . -3) (undo-tree-id283 . -3) (undo-tree-id284 . -3) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) (undo-tree-id289 . -3) (undo-tree-id290 . -3) (undo-tree-id291 . -3) (undo-tree-id292 . -3) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) (undo-tree-id313 . -3) (undo-tree-id314 . -3) (undo-tree-id315 . -3) (undo-tree-id316 . -3) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -2) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -4) 285) nil (26514 945 786673 637000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-comment-face fontified t)) . 255) (undo-tree-id260 . -1)) nil (26514 945 786644 859000) 0 nil])
([nil nil ((#("." 0 1 (face font-lock-comment-face fontified t)) . 255) (undo-tree-id258 . -1) (undo-tree-id259 . -1)) nil (26514 945 786644 186000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-delimiter-face fontified t)) . 255) (undo-tree-id256 . -1) (undo-tree-id257 . -1)) nil (26514 945 786642 935000) 0 nil])
([nil nil ((#(":" 0 1 (face font-lock-comment-face fontified t)) . 278) (undo-tree-id254 . -1) (undo-tree-id255 . -1)) nil (26514 945 786639 2000) 0 nil])
([nil nil ((#("python
" 0 7 (fontified t)) . 280) (undo-tree-id429 . -6) (undo-tree-id430 . -7) (t 26514 945 806238 432000)) nil (26514 1127 40441 653000) 0 nil])
([nil nil ((#("Copy
" 0 4 (fontified t) 4 5 (fontified t rear-nonsticky t)) . 280) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -5)) nil (26514 1127 40440 148000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 280) (undo-tree-id425 . -1)) nil (26514 1127 40437 442000) 0 nil])
([nil nil ((281 . 283) (280 . 281)) nil (26514 1127 40432 59000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1505 . 1506) (nil fontified nil 279 . 1506) (279 . 1506)) nil (26514 1127 40431 206000) 0 nil])
([nil nil ((1510 . 1511)) nil (26514 1127 40426 895000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 252) (undo-tree-id431 . -1) (t 26514 1127 57867 638000)) nil (26514 1131 423040 867000) 0 nil])
([nil nil ((1527 . 1528) (#(" " 0 1 (face font-lock-comment-face fontified nil)) . -1527) (undo-tree-id432 . -1) (1526 . 1527) (1508 . 1526) (t 26514 1131 439881 603000)) nil (26514 1165 46928 586000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2809 . 2810) (nil fontified nil 1528 . 2810) (1528 . 2810)) nil (26514 1165 46918 352000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 1558) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (t 26514 1165 65987 87000)) nil (26514 1173 6179 728000) 0 nil])
nil
